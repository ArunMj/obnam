#!/bin/sh
#
# blackboxtests -- run black box tests for obnam
#
# This script runs some automatic black box tests for obnam. The tests
# are structured as follows: first the initial tree to be backed up is
# created, and backed up. Then the tree is updated for the next
# generation, which gets backed up. This is repeated for each
# generation. In addition, a manifest file is created for each
# generation.
#
# After all generations have been created and backed up, they are
# restored one by one. A manifest file is created for the restored tree,
# and compared to the one that was created when the original generation
# was backed up. If there are any problems, the testing aborts.
#
# The generations are created either by tarballs or shell scripts. The
# former are unpacked into a temporary directory (each generation is
# unpacked on top of the previous one), and the scripts are run to
# modify the temporary directory for the next generation.
#
# Each test case is put into its own directory, and the directory should
# contain files named "gen??.tar.gz" (for the tarballs) or "gen??.sh"
# (for the shell scripts), where "??" is a two-digit number identifying
# the generation.
#
# This script outputs nothing if everything went well, and errors if
# something went badly.
#
# Copyright (C) 2006, 2007  Lars Wirzenius <liw@iki.fi>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


set -e

# tmp="tmp"; rm -rf "$tmp"; mkdir "$tmp"
tmp=$(mktemp -d)

if [ "$1" = "--use-coverage" ]
then
    shift
    CMD="coverage.py -x"
else
    CMD="python"
fi

CONFIG="--cache=$tmp/cache --store=$tmp/store --no-gpg"
CONFIG="$CONFIG --log-file=foo.log --log-level=debug --exclude=exclude"

MANIFESTOPTS="-i Inode -i Ctime -i Atime"

for dir in "$@"
do
    echo "Testing $dir..."
    rm -rf "$tmp"/*
    mkdir "$tmp/root"
    
    find "$dir" -maxdepth 1 -name 'gen[0-9][0-9].*' -type f |
    sort |
    nl |
    while read i gen
    do
        pre=$(echo  "$gen" | sed 's,/gen\([0-9][0-9]\)[^/]*$,/pre\1,').sh
        post=$(echo "$gen" | sed 's,/gen\([0-9][0-9]\)[^/]*$,/post\1,').sh

        case "$gen" in
        *.tar.gz)
            tar -C "$tmp/root" -xzf "$gen"
            ;;
        *.sh)
            sh "$gen" "$tmp"
            ;;
        esac
        
        python manifest.py $MANIFESTOPTS "$tmp/root" > "$tmp/manifest-$i"
        
        if [ -e "$pre" ] && ! sh "$pre" "$tmp"
        then
            echo "Pre-check $pre failed, aborting" 1>&2
            exit 1
        fi

        $CMD cli.py $CONFIG -C "$tmp/root" backup .

        if [ -e "$post" ] && ! sh "$post" "$tmp"
        then
            echo "Post-check $post failed, aborting" 1>&2
            exit 1
        fi
    done
    
    if [ ! -e "$dir/no-manifest" ]
    then
        $CMD cli.py $CONFIG generations |
        nl |
        while read i genid
        do
            rm -rf "$tmp/root"
            mkdir "$tmp/root"
            python cli.py $CONFIG -C "$tmp/root" restore "$genid"
            python manifest.py $MANIFESTOPTS "$tmp/root" > "$tmp/manifest2-$i"
            diff -u -U 15 "$tmp/manifest-$i" "$tmp/manifest2-$i"
        done
    fi

    if [ ! -e "$dir/no-manifest" ]
    then
        genlist="$(mktemp)"
        $CMD cli.py $CONFIG generations | nl > "$genlist"

        cat "$genlist" |
        while read i genid
        do
            python cli.py $CONFIG forget "$genid"
            
            awk -vgen="$i" '$1 > gen' "$genlist" |
            while read i2 genid2
            do
                rm -rf "$tmp/root"
                mkdir "$tmp/root"
                python cli.py $CONFIG -C "$tmp/root" restore "$genid2"
                python manifest.py $MANIFESTOPTS "$tmp/root" \
                    > "$tmp/manifest3-$i2"
                diff -u -U 15 "$tmp/manifest-$i2" "$tmp/manifest3-$i2"
            done
        done
        
        rm -f "$genlist"
    fi
done

rm -rf "$tmp"
