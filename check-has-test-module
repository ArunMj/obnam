#!/usr/bin/python
# check-has-test-module - assert modules on command line have a test module
#
# List of exceptions is read from ./test-module-exceptions.
#
# Copyright (C) 2008  Lars Wirzenius <liw@liw.fi>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


import os
import sys


def main():
    try:
        f = file("test-module-exceptions")
        exceptions = [line.strip() 
                      for line in f 
                      if line and not line.lstrip().startswith("#")]
        f.close()
    except IOError:
        exceptions = []

    errors = False
    for module in sys.argv[1:]:
        if module.endswith("_tests.py") or module in exceptions:
            # It's a test module, so ignore it. This allows caller to
            # say "check-has-test-module foo/*.py".
            pass
        elif module.endswith(".py"):
            root, ext = os.path.splitext(module)
            testmodule = root + "_tests.py"
            if not os.path.exists(testmodule):
                sys.stderr.write("Missing test module: %s\n" % testmodule)
                errors = True
        else:
            sys.stderr.write("Unknown file type: %s\n" % module)
            errors = True
    if errors:
        sys.exit(1)


if __name__ == "__main__":
    main()
