<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright 2006, 2007 Lars Wirzenius (liw@iki.fi)

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

-->

<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN"
"file:///usr/share/xml/docbook/schema/dtd/4.4/docbookx.dtd"
[]>

<refentry>

  <refentryinfo>
    <address>
      <email>liw@iki.fi</email>
    </address>
    <author>
      <firstname>Lars</firstname>
      <surname>Wirzenius</surname>
    </author>
    <date>2007-03-21</date>
  </refentryinfo>
  
  <refmeta>
    <refentrytitle>obnam</refentrytitle>
    <manvolnum>1</manvolnum>
  </refmeta>
  
  <refnamediv>
    <refname>obnam</refname> 
    <refpurpose>online backup tool</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <cmdsynopsis>
      <command>obnam backup</command>
      <arg choice="opt">options</arg>
      <arg choice="plain">directory</arg>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>obnam generations</command>
      <arg choice="opt">options</arg>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>obnam show-generations</command>
      <arg choice="opt">options</arg>
      <arg choice="plain">generation-id</arg>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>obnam restore</command>
      <arg choice="opt">options</arg>
      <arg choice="plain">generation-id</arg>
      <arg choice="opt">pathname</arg>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>obnam forget</command>
      <arg choice="opt">options</arg>
      <arg choice="plain">generation-id</arg>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>obnam write-config</command>
      <arg choice="opt">options</arg>
    </cmdsynopsis>
  </refsynopsisdiv>
  
  <refsect1>
    <title>DESCRIPTION</title>

    <para><command>obnam</command> is a tool to do off-site backups over
    computer networks. It backs files up using the
    <command>rsync</command> algorithm, for efficiency, and encrypts the
    backups before sending data over the network to be stored on a
    remote server, for security.</para>
    
    <para>Backups may be stored in a directory on the local file system
    or remotely on an SFTP server. The server location is given as a URL,
    of one of the the following formats:
    <replaceable>sftp://user@host:port/absolute/path</replaceable> or 
    <replaceable>sftp://user@host:port/~/path/relative/to/home/dir</replaceable>.
    In either case, <replaceable>user</replaceable> is the username on the
    remote host (can be left out if same as on local host), and
    <replaceable>port</replaceable> is the numeric port number to connect to
    (again, can be left out if default SSH/SFTP port is OK). Also, if the
    remote home directory is used as storage, the path (in either form) can
    be left out.</para>
    
    <para>In the following examples, the remote username is 
    <literal>ulla</literal>, the host name is <literal>example.com</literal>,
    and the remote directory is either <literal>/srv/backups/ulla</literal>
    or <literal>safe</literal> in the remote home directory. The port is
    always the default SSH and SFTP port.</para>
    
<programlisting>sftp://example.com/srv/backups/ulla
sftp://ulla@example.com/srv/backups/ulla
sftp://example.com/~/safe
sftp://ulla@example.com/~/safe
</programlisting>
    
    <para>In the examples, the first two lines refer to the same location
    (assuming the local username is also <literal>ulla</literal>), and
    so do the last two.</para>

  </refsect1>
  
  <refsect1>
    <title>OPTIONS</title>
    
    <variablelist>
    
      <varlistentry>
        <term><option>--block-size</option>=<replaceable>SIZE</replaceable></term>
        <listitem>
          <para>Make blocks that are about SIZE kilobytes.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>-C</option> <replaceable>DIR</replaceable></term>
        <term><option>--target</option>=<replaceable>DIR</replaceable></term>
        <listitem>
          <para>Resolve filenames relative to DIR.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>--cache</option>=<replaceable>DIR</replaceable></term>
        <listitem>
          <para>Store cached blocks in <replaceable>DIR</replaceable>.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>--config</option>=<replaceable>FILE</replaceable></term>
        <listitem>
          <para>In addition to any other configuration files, also read
          <replaceable>FILE</replaceable>, after the other files have been
          read.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>--exclude</option>=<replaceable>REGEXP</replaceable></term>
        <listitem>
          <para>Exclude pathnames matching
          <replaceable>REGEXP</replaceable>.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>--generation-times</option></term>
        <listitem>
          <para>With the <literal>generations</literal> command, 
          show also the start and end times of each generation (in
          the UTC time zone, also known as GMT). Note
          that this means the operation runs slower, since it needs to
          download more data from the store.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>--gpg-encrypt-to</option>=<replaceable>KEYID</replaceable></term>
        <listitem>
          <para>Add <replaceable>KEYID</replaceable> to list of keys to
          use for encryption.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>--gpg-home</option>=<replaceable>DIR</replaceable></term>
        <listitem>
          <para>Use <replaceable>DIR</replaceable> as the location for
          GnuPG keyrings and other data files.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>--gpg-sign-with</option>=<replaceable>KEYID</replaceable></term>
        <listitem>
          <para>Sign backups with <replaceable>KEYID</replaceable>.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>-h</option></term>
        <term><option>--help</option></term>
        <listitem>
          <para>Show help message and exit.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>--host-id</option>=<replaceable>ID</replaceable></term>
        <listitem>
          <para>Use <replaceable>ID</replaceable> to identify the client
          host. This can be any arbitrary string, but defaults to the
          hostname. You usually don't need to set this, except when
          viewing or restoring backups for another client host.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>--log-file</option>=<replaceable>FILE</replaceable></term>
        <listitem>
          <para>Append log messages to
          <replaceable>FILE</replaceable>.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>--log-level</option>=<replaceable>LEVEL</replaceable></term>
        <listitem>
          <para>Set log level to <replaceable>LEVEL</replaceable>, one
          of <literal>debug</literal>, <literal>info</literal>,
          <literal>warning</literal>, <literal>error</literal>,
          <literal>critical</literal> (default is
          <literal>warning</literal>).</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>--no-configs</option></term>
        <listitem>
          <para>Do not read any default configuration files, only those
          explicitly named with <option>--config</option>.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>--no-gpg</option></term>
        <listitem>
          <para>Don't use gpg at all.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>--object-cache-size</option>=<replaceable>COUNT</replaceable></term>
        <listitem>
          <para>Set object cache maximum size to
          <replaceable>COUNT</replaceable> objects (default depends on
          block size.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>--progress</option></term>
        <listitem>
          <para>Report progress of backups as they're made.</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>--ssh-key</option>=<replaceable>FILE</replaceable></term>
        <listitem>
          <para>Read ssh private key from
          <replaceable>FILE</replaceable> (and public key from
          <replaceable>FILE</replaceable><literal>.pub</literal>).</para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term><option>--store</option>=<replaceable>LOCATION</replaceable></term>
        <listitem>
          <para>Use <replaceable>LOCATION</replaceable> for storing the
          backups. <replaceable>LOCATION</replaceable> is either a directory
          name on the local file system, or an SFTP url. See above in
          "DESCRIPTION" for an explanation.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--snapshot-bytes</option>=<replaceable>SIZE</replaceable></term>
        <listitem>
          <para>Make a snapshot generation approximately after SIZE bytes
          uploaded bytes. Default is 0, meaning no snapshot generations should
          be uploaded. A snapshot generation contains the changes uploaded
          so far; it is otherwise like a normal generation, but there is no
          attempt to guarantee that all changes have been uploaded. This can
          be useful for long backups that may be aborted due to network
          errrors: the next generation will continue from the latest 
          snapshot.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--max-mappings</option>=<replaceable>COUNT</replaceable></term>
        <listitem>
          <para>This is a knob to tweak Obnam peformance, and should hopefully
          not be necessary. Obnam keeps
          mappings from internal objects to files in which they are stored.
          This setting changes how many such mappings are kept in memory
          at once. The higher the value, the more memory is used. The
          lower the value, to more often Obnam needs to re-load the mappings
          from disk.
          </para>
        </listitem>
      </varlistentry>
        
      <varlistentry>
        <term><option>--version</option></term>
        <listitem>
          <para>Print out name and version of program.</para>
        </listitem>
      </varlistentry>
    
    </variablelist>
    
  </refsect1>
  
  
  <refsect1>
    <title>CONFIGURATION FILES</title>
    
    <para><command>obnam</command> looks for several configuration files
    when it starts up. The list of files depends on whether it is
    started by the root user, or some other user. See the FILES section
    for the list. Each file is read if it exists, and ignored if it does
    not. Each file may change the configuration variables, the effect is
    cumulative.</para>
    
    <para>The files follow the "INI" file syntax, as defined by the
    Python <literal>ConfigParser</literal> class. The following is an
    example, which lists all configuration variables:
    
<programlisting>[backup]
block-size = 1048576
cache = tmp.cache
exclude =
generation-times = false
gpg-encrypt-to = 490C9ED1
gpg-home = sample-gpg-home
gpg-sign-with = 490C9ED1
host-id = dorfl
log-file =
log-level = warning
no-gpg = false
ssh-key = ssh-key
store = tmp.store</programlisting>

    The syntax is slightly extended from the standard syntax: you can
    list multiple values for one value with the <literal>+=</literal>
    operator. For example, if you want to have multiple
    <literal>exclude</literal> values, write this:
    
<programlisting>exclude = first
exclude += second
exclude += third</programlisting>

    This multi-value syntax is useful only with <literal>exclude</literal>
    at the moment.</para>
    
    <para>The variables correspond to the options of the same names.</para>
    
  </refsect1>


  <refsect1>
    <title>EXAMPLES</title>
    
    <para>The following examples assume you have configured
    <command>obnam</command> using a configuration file so that it knows
    where to store backups, and so on. This way, the sample command lines
    are not burdened with unnecessary details.</para>
  
    <para>To back up your home directory use the following command:
    
<screen>obnam backup $HOME</screen>

    This works for the initial generation and every new generation. Each
    new generation is backed up as if it were a full backup, but files
    that existed in the previous generation are backed up using the
    <command>rsync</command> algorithm, and only the changes since the
    previous generation are uploaded and stored. When restoring, this
    distinction is, however, invisible to the user. The changes from the
    previous version are computed when a file with the same name exists
    in the previous generation, and its size, change time (mtime), owner,
    group, link count, or permissions have changed.
    </para>
  
    <para>To list the generations that currently exist, use one of the
    following commands:
    
<screen>obnam generations
obnam generations --generation-times</screen>

    The former is faster, and the latter shows the times when the generations
    were made. The generations are shown in the order they were made, the
    newest one being last. Each generation is identified by a Universally
    Unique IDentifier, or UUID.
    </para>
  
    <para>To see the files in a generation, use the following command:
    
<screen>obnam show-generations <replaceable>GENERATION-ID</replaceable></screen>

    Here <replaceable>GENERATION-ID</replaceable> is one of the UUIDs that
    the <command>obnam generations</command> command showed. The file list
    is similar to the output of <command>ls -l</command>.
    </para>
  
    <para>To restore an entire generation from the, use the following
    command:
    
<screen>obnam restore <replaceable>GENERATION-ID</replaceable> --target=<replaceable>DIR</replaceable></screen>

    To restore just a few files (or directories, including their files)
    add them to the end of the command line:
    
<screen>obnam restore <replaceable>GENERATION-ID</replaceable> --target=<replaceable>DIR</replaceable> README src/main.c</screen>

    Here, <replaceable>GENERATION-ID</replaceable> is again the UUID
    shown by <command>obnam generations</command>, and
    <replaceable>DIR</replaceable> is the directory under which the
    restored files will be placed. To avoid problems with overwriting
    files, it is best to choose a new directory as
    <replaceable>DIR</replaceable> if possible. </para>
  
    <para>To forget (remove) a generation, use the following command:
    
<screen>obnam forget <replaceable>GENERATION-ID</replaceable></screen>

    This will remove the generation (you can give several at once, if
    you want). It will also <emphasis>remove any files in the store that
    are not part of any non-forgotten generations</emphasis>. Any parts
    of incremental backups (rsync file deltas) from forgotten generations
    that are needed to re-create remaining generations are kept even if
    the rest of the generations are deleted.</para>
  
  </refsect1>
  
  
  <refsect1>
    <title>FILES</title>
    
    <variablelist>
        
        <varlistentry>
            <term><filename>/usr/share/obnam/obnam.conf</filename></term>
            <listitem>
                <para>First configuration file <command>obnam</command>
                reads if it exists.</para>
            </listitem>
        </varlistentry>

        <varlistentry>
            <term><filename>/etc/obnam/obnam.conf</filename></term>
            <listitem>
                <para>For the root user, the second configuration file
                <command>obnam</command> reads if it exists.</para>
            </listitem>
        </varlistentry>
        
        <varlistentry>
            <term><filename>~/.obnam/obnam.conf</filename></term>
            <listitem>
                <para>For other users, the second configuration file
                <command>obnam</command> reads if it exists.</para>
            </listitem>
        </varlistentry>
        
    </variablelist>
      
  </refsect1>

</refentry>
