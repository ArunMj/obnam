#!/usr/bin/python
#
# Copyright (C) 2009  Lars Wirzenius <liw@liw.fi>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


"""Run some black box tests of obnam."""


import shutil
import sys
import tempfile
import traceback


class RestoresIdenticalData:

    """Generate some data, back it up, restore. Result should be identical."""
    
    def __init__(self):
        self.temproot = tempfile.mkdtemp()

    def tempdir(self):
        """Create a new temporary directory, create its name.
        
        The clean() method will remove this directory.
        
        """
        
        return tempfile.mkdtemp(dir=self.temproot)

    def clean(self):
        shutil.rmtree(self.temproot)
    
    def generate(self):
        """Generate some test data.
        
        Return name of temporary directory.
        
        """
    
        data = self.tempdir()
        return data
    
    def backup(self, data):
        """Back up a data directory. Return name of store."""
        store = self.tempdir()
        return store
        
    def restore(self, store):
        """Restore the newest generation from a store.
        
        Return name of directorey with restored data.
        
        """
        
        restored = self.tempdir()
        return restored

    def verify(self, data, restored):
        """Verify that a restored directory is identical to the original.
        
        Raise an exception for the first error found.
        
        """
    
    def test(self):
        data = self.generate()
        store = self.backup(data)
        restored = self.restore(store)
        self.verify(data, restored)


class ObnamBlackBoxTests:

    """Main class for running black box tests of obnam."""
    
    def run(self):
        errors = False
        tests = [RestoresIdenticalData]
        for klass in tests:
            test = klass()
            try:
                test.test()
            except Exception, e:
                sys.stderr.write("Error: %s\n" % str(e))
                sys.stderr.write(traceback.format_exc())
                errors = True
            test.clean()
        if errors:
            sys.exit(1)


if __name__ == "__main__":
    ObnamBlackBoxTests().run()
