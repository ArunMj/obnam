#!/usr/bin/env python
#
# Copyright 2014  Lars Wirzenius
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import cliapp
import json
import os
import shutil
import tempfile
import time


class Measurer(object):

    def __init__(self, results, label):
        self.results = results
        self.measurements = {
            'label': label,
            }

    def __enter__(self):
        self.start = time.time()
        return self.measurements

    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type is None:
            end = time.time()
            self.measurements['duration'] = end - self.start
            filename = os.path.join(
                self.results, '%s.json' % self.measurements['label'])
            with open(filename, 'w') as f:
                json.dump(self.measurements, f)
        return False


class EmptyFilesBenchmark(object):

    num_files = 10
    files_per_dir = 3

    def __init__(self, settings):
        self.settings = settings

    def run(self):
        self.tempdir = tempfile.mkdtemp()
        self.live_data = self.create_live_data()
        self.repo = self.create_repo()
        self.results = self.create_results_dir()
        self.backup('initial-backup')
        self.backup('no-op-backup')
        self.restore_with_obnam_restore()
        self.restore_with_obnam_mount()
        shutil.rmtree(self.tempdir)

    def create_live_data(self):
        live_data = os.path.join(self.tempdir, 'live-data')
        os.mkdir(live_data)
        for i in range(self.num_files):
            subdir = os.path.join(
                live_data, 'dir-%d' % (i / self.files_per_dir))
            if (i % self.files_per_dir) == 0:
                os.mkdir(subdir)
            filename = os.path.join(subdir, 'file-%d' % i)
            with open(filename, 'w'):
                pass
        return live_data

    def create_repo(self):
        repo = os.path.join(self.tempdir, 'repo')
        os.mkdir(repo)
        return repo

    def create_results_dir(self):
        results = self.settings['results-dir']
        if not os.path.exists(results):
            os.mkdir(results)
        return results

    def backup(self, label):
        with Measurer(self.results, label):
            self.run_obnam(['backup', '-r', self.repo, self.live_data], label)

    def restore_with_obnam_restore(self):
        restored = os.path.join(self.tempdir, 'restored')
        os.mkdir(restored)
        with Measurer(self.results, 'obnam-restore'):
            self.run_obnam(
                ['restore', '-r', self.repo, '--to', restored],
                'obnam-restore')
        shutil.rmtree(restored)

    def restore_with_obnam_mount(self):
        mount = os.path.join(self.tempdir, 'mount')
        os.mkdir(mount)

        restored = os.path.join(self.tempdir, 'restored')
        os.mkdir(restored)

        self.run_obnam(
            ['mount', '-r', self.repo, '--to', mount],
            'obnam-mount')
        with Measurer(self.results, 'obnam-mount'):
            cliapp.runcmd(['cp', '-a', mount + '/.', restored + '/.'])
        cliapp.runcmd(['fusermount', '-u', mount])

        shutil.rmtree(restored)
        os.rmdir(mount)

    def run_obnam(self, args, label):
        base_command = [
            './obnam',
            '--no-default-config',
            '--log', os.path.join(self.results, '%s.log' % label),
            '--log-level', 'debug',
            ]
        env = dict(os.environ)
        env['OBNAM_PROFILE'] = os.path.join(
            self.results, '%s.prof' % label)
        cliapp.runcmd(base_command + args, env=env)


class ObnamBenchmarkRunner(cliapp.Application):

    def add_settings(self):
        self.settings.string(
            ['results-dir'],
            'put results in DIR',
            metavar='DIR',
            default='.')

    def process_args(self, args):
        benchmark = EmptyFilesBenchmark(self.settings)
        benchmark.run()


if __name__ == '__main__':
    ObnamBenchmarkRunner().run()

