#!/usr/bin/python
#
# Copyright 2010, 2011  Lars Wirzenius
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import cliapp
import glob
import os
import shutil
import subprocess
import tempfile


class ObnamBenchmark(cliapp.Application):

    default_sizes = ['1g/100m']
    keyid = '3B1802F81B321347'

    def add_settings(self):
        self.settings.add_string_setting(['obnam-branch'],
                                         'use DIR as the obnam branch to '
                                            'benchmark (default: %default)',
                                          metavar='DIR',
                                          default='.')
        self.settings.add_string_setting(['larch-branch'],
                                         'use DIR as the larch branch '
                                            '(default: %default)',
                                          metavar='DIR',
                                  default=os.path.expanduser('~/larch/trunk'))
        self.settings.add_string_setting(['seivot-branch'],
                                         'use DIR as the seivot branch '
                                            '(default: installed seivot)',
                                          metavar='DIR')
        self.settings.add_string_setting(['wiki'],
                                         'use DIR as the wiki branch '
                                            '(default: %default)',
                                          metavar='DIR',
                                  default=os.path.expanduser('~/braawi.org'))
        
        self.settings.add_string_list_setting(['size'],
                                              'add PAIR to list of sizes to '
                                                'benchmark (e.g., 10g/1m)',
                                              metavar='PAIR')
        self.settings.add_integer_setting(['generations'],
                                          'benchmark N generations '
                                            '(default: %default)',
                                          metavar='N',
                                          default=5)

    def process_args(self, args):
        if 'TMPDIR' not in os.environ:
            raise cliapp.AppException('TMPDIR is not set. '
                                       'You would probably run out of space '
                                       'on /tmp.')

        sizes = self.settings['size'] or self.default_sizes
        obnam_revno = self.bzr_revno(self.settings['obnam-branch'])
        larch_revno = self.bzr_revno(self.settings['larch-branch'])
        
        results = os.path.join(self.settings['wiki'],
                               'obnam',
                               'benchmarks',
                               '%s-%s' % (obnam_revno, larch_revno))
        if os.path.exists(results):
            raise cliapp.AppException('%s already exists' % results)
        os.mkdir(results)
        
        obnam_branch = self.settings['obnam-branch']
        larch_branch = self.settings['larch-branch']
        if self.settings['seivot-branch']:
            seivot = os.path.join(self.settings['seivot-branch'], 'seivot')
            tocsv = os.path.join(self.settings['seivot-branch'], 
                                 'seivots-to-csv')
        else:
            seivot = 'seivot'
            tocsv = 'seivots-to-csv'
        generations = self.settings['generations']
        
        tempdir = tempfile.mkdtemp()
        gnupghome = os.path.join(tempdir, 'gnupghome')
        shutil.copytree('test-gpghome', gnupghome)
        env = dict(os.environ)
        env['GNUPGHOME'] = gnupghome
        
        for pair in sizes:
            initial, inc = self.parse_size_pair(pair)
            print 'Benchmark run for size %s inc %s' % (initial, inc)

            obnam_profile = os.path.join(results, 
                                         'obnam-' + initial + 
                                            '-%(op)s-%(gen)s-%(order)s.txt')
            output = os.path.join(results, 'obnam-%s.seivot' % initial)
            subprocess.check_call([seivot,
                                   '--drop-caches',
                                   '--obnam-branch', obnam_branch,
                                   '--larch-branch', larch_branch,
                                   '--encrypt-with', self.keyid,
                                   '--initial-data', initial,
                                   '--incremental-data', inc,
                                   '--obnam-profile', obnam_profile,
                                   '--generations', str(generations),
                                   '--output', output],
                                  env=env)

        shutil.rmtree(tempdir)
        
        with open(results + '.mdwn', 'w') as f:
            f.write('Benchmark results for Obnam r%s and larch r%s\n' %
                    (obnam_revno, larch_revno))
            f.write('%s\n\n' % ('=' * 20))
            for basename in sorted(os.listdir(results)):
                f.write('* [[%s/%s]]\n' % (results, basename))

        seivots = glob.glob(results + '/../*/*.seivot')
        csv_dir = results + '/..'
        subprocess.check_call([tocsv, '--output-dir', csv_dir] + seivots)
            
    def bzr_revno(self, branch):
        p = subprocess.Popen(['bzr', 'revno'], cwd=branch,
                             stdout=subprocess.PIPE)
        out, err = p.communicate()
        if p.returncode != 0:
            raise cliapp.AppException('bzr failed')
        return out.strip()
        
    def parse_size_pair(self, pair):
        return pair.split('/', 1)


if __name__ == '__main__':
    ObnamBenchmark().run()

