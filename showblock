#!/usr/bin/python


"""Show the contents of a storage block."""


import sys

import obnam


def format_objmap(data):
    uuids = []
    while data:
        uuids.append(data[:36])
        data = data[36:]
    return "%s -> %s" % (uuids[0], ",".join(uuids[1:]))


def format_octal(data):
    return "0%o" % obnam.varint.decode(data, 0)[0]


def format_decimal(data):
    return "%d" % obnam.varint.decode(data, 0)[0]
    

component_data_formatters = {
    obnam.cmp.OBJKIND: 
        lambda data: \
            obnam.obj.kind_name(obnam.varint.decode(data, 0)[0]),
    obnam.cmp.ST_MODE: format_octal,
    obnam.cmp.ST_INO: format_decimal,
    obnam.cmp.ST_DEV: format_decimal,
    obnam.cmp.ST_NLINK: format_decimal,
    obnam.cmp.ST_UID: format_decimal,
    obnam.cmp.ST_GID: format_decimal,
    obnam.cmp.ST_SIZE: format_decimal,
    obnam.cmp.ST_ATIME: format_decimal,
    obnam.cmp.ST_CTIME: format_decimal,
    obnam.cmp.ST_MTIME: format_decimal,
    obnam.cmp.ST_BLOCKS: format_decimal,
    obnam.cmp.ST_BLKSIZE: format_decimal,
    obnam.cmp.ST_RDEV: format_decimal,
    obnam.cmp.OBJMAP: format_objmap,
}


def show_component(component, indent=0):
    x = " " * (indent * 2)
    kind = obnam.cmp.get_kind(component)
    print x + "Component:", kind, obnam.cmp.kind_name(kind)
    if obnam.cmp.is_composite(component):
        for c in obnam.cmp.get_subcomponents(component):
            show_component(c, indent+1)
    else:
        fmt = component_data_formatters.get(kind, repr)
        print x + "  data:", fmt(obnam.cmp.get_string_value(component))


def show_block(filename):
    print "======== block:", filename, "==========="
    f = file(filename, "r")
    str = f.read()
    f.close()
    pos = 0
    for c in obnam.obj.block_decode(str):
        show_component(c)
        print


def main():
    for filename in sys.argv[1:]:
        show_block(filename)


if __name__ == "__main__":
    main()
