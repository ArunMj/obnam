#!/usr/bin/python
#
# Copyright (C) 2006  Lars Wirzenius <liw@iki.fi>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


"""Show the contents of a storage block."""


import sys

import obnamlib


def format_objmap(data):
    uuids = []
    while data:
        uuids.append(data[:36])
        data = data[36:]
    return "%s -> %s" % (uuids[0], ",".join(uuids[1:]))


def format_octal(data):
    return "0%o" % obnamlib.varint.decode(data, 0)[0]


def format_decimal(data):
    return "%d" % obnamlib.varint.decode(data, 0)[0]
    

component_data_formatters = {
    obnamlib.cmp.OBJKIND: 
        lambda data: \
            obnamlib.obj.kind_name(obnamlib.varint.decode(data, 0)[0]),
    obnamlib.cmp.OBJMAP: format_objmap,
}


def show_component(component, indent=0):
    x = " " * (indent * 2)
    kind = component.kind
    print x + "Component:", kind, obnamlib.cmp.kind_name(kind)
    if component.is_composite():
        for c in component.subcomponents:
            show_component(c, indent+1)
    else:
        fmt = component_data_formatters.get(kind, repr)
        print x + "  data:", fmt(component.str)


def show_block(filename):
    print "======== block:", filename, "==========="
    f = file(filename, "r")
    str = f.read()
    f.close()
    pos = 0
    for c in obnamlib.obj.block_decode(str):
        show_component(c)
        print


def main():
    for filename in sys.argv[1:]:
        show_block(filename)


if __name__ == "__main__":
    main()
